"""
TODO
"""
from typing import Any, Generator, List, Tuple, Optional
from typing import re as BuiltInReType
import re

import ahocorasick

from cnt.rulebase import workflow, const, utils

IntervalType = Tuple[int, int]
IntervalGeneratorType = Generator[IntervalType, None, None]


def _next_interval(intervals: IntervalGeneratorType) -> Optional[IntervalType]:
    try:
        return next(intervals)
    except StopIteration:
        return None


def _build_ac_automation(keys: List[str]) -> Any:
    atm = ahocorasick.Automaton()  # pylint: disable=c-extension-no-member
    for idx, key in enumerate(keys):
        atm.add_word(key, (idx, key))
    atm.make_automaton()
    return atm


def _ac_automation_match(text: str, ac_automation: Any) -> IntervalGeneratorType:
    prev_start, prev_end = -1, -1

    # ``iter``` will return ``end`` in accending order, see
    # https://github.com/WojciechMula/pyahocorasick/blob/484b1f13549fc9bdeb9868d8a1711d1861f804c3/py/pyahocorasick.py#L229-L252
    # Also note the ``[start, end]`` generated by ``iter`` are closed interval.
    for end, (_, key) in ac_automation.iter(text):
        start = end + 1 - len(key)

        if prev_start < 0:
            # init.
            prev_start, prev_end = start, end
        elif start <= prev_end + 1:
            # check the interleaved case.
            prev_end = end
        else:
            # should return the previous interval. Note we yield half-opened interval here.
            yield (prev_start, prev_end + 1)
            prev_start, prev_end = start, end

    # yield the last interval.
    if prev_start >= 0:
        yield (prev_start, prev_end + 1)


def _re_pattern_from_sorted_intervals(sorted_intervals: List[IntervalType]) -> BuiltInReType:
    inner = [f'{chr(lb)}-{chr(ub)}' for lb, ub in sorted_intervals]
    joined_inner = ''.join(inner)
    pattern = f'[{joined_inner}]+'

    return re.compile(pattern, re.UNICODE)


class IntervalLabeler(workflow.BasicSequentialLabeler):

    def __init__(self, input_sequence: str):
        super().__init__(input_sequence)

        self.intervals = self.initialize_intervals()
        self.cur_interval = _next_interval(self.intervals)

    def initialize_intervals(self) -> IntervalGeneratorType:
        raise NotImplementedError()

    def label(self, index: int) -> bool:
        if self.cur_interval is None or index < self.cur_interval[0]:
            return False

        if index < self.cur_interval[1]:
            return True

        self.cur_interval = _next_interval(self.intervals)
        return False


class SentenceEndingLabeler(IntervalLabeler):
    """
    Mark sentence endings based on
    :py:const:`cnt.rulebase.const.sentence_endings.EM_SENTENCE_ENDINGS`

    Time & space complexity: `O(1)`.
    """

    AC_AUTOMATION = _build_ac_automation(const.EM_SENTENCE_ENDINGS)

    def initialize_intervals(self) -> IntervalGeneratorType:
        return _ac_automation_match(self.input_sequence, self.AC_AUTOMATION)


class WhitespaceLabeler(IntervalLabeler):
    """
    Mark unicode whitespace.

    Time & space complexity: `O(1)`.
    """

    WHITESPACE_PATTERN = re.compile(r'\s+')

    def initialize_intervals(self) -> IntervalGeneratorType:
        return (match.span() for match in self.WHITESPACE_PATTERN.finditer(self.input_sequence))


class SentenceValidCharacterLabeler(IntervalLabeler):
    """
    Mark valid character of chinese sentence.

    Time & space complexity: `O(1)`.
    """

    SENTENCE_VALID_CHARS_PATTERN = _re_pattern_from_sorted_intervals(
            utils.sorted_chain(
                    const.ITV_CHINESE_CHARS,
                    const.ITV_ENGLISH_CHARS,
                    const.ITV_DIGITS,
                    const.ITV_DELIMITERS,
            ))

    def initialize_intervals(self) -> IntervalGeneratorType:
        return (match.span()
                for match in self.SENTENCE_VALID_CHARS_PATTERN.finditer(self.input_sequence))
